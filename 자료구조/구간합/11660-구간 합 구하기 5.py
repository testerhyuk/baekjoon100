import sys

input = sys.stdin.readline

n, m = map(int, input().split())
lst = [list(map(int, input().split())) for _ in range(n)]
lst_sum = [[0]*(n+1) for _ in range(n+1)] # 리스트가 2차원이므로 합 배열도 2차원 리스트

for i in range(1, n+1):
    for j in range(1, n+1):
        """
        2차원 리스트에서의 합 배열은 블록별 합을 구해야 한다
        리스트 A가
        [1, 2, 3, 4]
        [2, 3, 4, 5]
        일 때,

        합 배열 S는
        [1, 3, 6, 10]
        [3, 8, 15, 24]
        가 되는데

        예를 들어 S[1][1] 는 A[0][0], A[0][1], A[1][0] + A[1][1]을 모두 더한 값이 된다
        그리고 이 값을 구하는 공식은
        S[0][1]과 S[1][0]을 더하고 S[0][0]을 뺀 값이 된다

        S[0][1]은 A[0][0]과 A[0][1]을 더한 값이고
        S[1][0]은 A[0][0]과 A[1][0]을 더한 값인데
        S[0][1] + S[1][0]을 하게 되면
        A[0][0]을 두번이나 더한 것이 되므로
        한 번 더 더하게 된 A[0][0]을 빼야한다 
        """
        lst_sum[i][j] = lst_sum[i-1][j] + lst_sum[i][j-1] - lst_sum[i-1][j-1] + lst[i-1][j-1]

for _ in range(m):
    x1, y1, x2, y2 = map(int, input().split())

    """
    예를 들어,
    리스트 A가
    [1, 2, 3, 4]
    [2, 3, 4, 5]
    [3, 4, 5, 6]
    이고,

    합 배열 S가
    [1, 3, 6, 10]
    [3, 8, 15, 24]
    [6, 15, 27, 42]
    일때

    (1, 1), (2, 2) 구간의 합은
    3 + 4 + 4 + 5 = A[1][1] + A[1][2] + A[2][1] + A[2][2]가 된다

    이를 구할 때는

    S[2][2] - S[0][2] - S[2][0] + S[0][0]
    인데,

    S[2][2]는 (0,0) ~ (2, 2)의 구간 합이고
    여기서 (0,0) ~ (2,0)의 구간 합인 S[2][0]과
    (0,0) ~ (0,2)의 구간 합인 S[0][2]과을 빼게 되면
    (1, 1), (2, 2) 구간의 합을 구할 수 있게 된다
    그런데 이 과정에서 (0, 0)의 값인 S[0][0]을 두 번 빼는 것이 되므로
    마지막에 S[0][0]을 한 번 더해줘야 원하는 구간의 값이 나온다
    """
    res = lst_sum[x2][y2] - lst_sum[x2][y1-1] - lst_sum[x1-1][y2] + lst_sum[x1-1][y1-1]
    print(res)